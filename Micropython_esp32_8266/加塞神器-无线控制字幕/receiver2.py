# esp32执行 接收端开启ap并控制屏幕

import network
from machine import Pin
import json
import socket
import time

# from testlcd import *
import max7219
from machine import Pin, SPI
#####

def receiver():
    ap = network.WLAN(network.AP_IF)
    # ap.active(False)
    ap.active(True)
    ap.config(essid='pyb_test', authmode=2, password='11111111')
    time.sleep(3)
    led = Pin(2,Pin.OUT)
    led.on() #light
    

    addr0 = ('192.168.4.1', 8085)

    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #UDP
    s.setsockopt(socket.SOL_SOCKET,socket.SO_REUSEADDR,1)  
    s.bind(addr0)
    s.settimeout(0.5)
    # #子节点
    # s1 = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
    # addr1 = ('192.168.4.2', 8080)

    print("start ap ok.")

    ###
    spi = SPI(1, baudrate=1000000, polarity=1, phase=0, sck=Pin(4), mosi=Pin(23))
    ss = Pin(5, Pin.OUT)

    display = max7219.Matrix8x8(spi, ss, 16)
    display.buffer=  b'\x00\x00\x00\x00\x18\x8c\x18\x8c\x00\x00\x00\x00\x18\x8c\x18\x8c\x00\x00\x00\x00\x18\x84\x18\x84\x00\x00\x00\x00\x18\x84\x18\x84\x00\x00\x00\x00\x07\xfc\x07\xfc\x00\x00\x00\x00\x07\xfc\x07\xfc\x00\xc0\x00\xc0\x00\x80\x00\x80\x00\xc0\x00\xc0\x00\x80\x00\x80\x01\xe0\x01\xe0\x00\x80\x00\x80\x01\xe0\x01\xe0\x00\x80\x00\x80\x02\xa0\x02\xa0\x00\x80\x00\x80\x02\xa0\x02\xa0\x00\x80\x00\x80\x04\x90\x04\x90\x00\x80\x00\x80\x04\x90\x04\x90\x00\x80\x00\x80\x0c\x98\x0c\x98\x00\x80\x00\x80\x0c\x98\x0c\x98\x00\x80\x00\x80'
    display.show()
    ###

    
    temp_status = 0

    while 1:
        #UDP传输
        #第一个节点
        # s1.sendto(b'\x01', addr1)

        recv_data1 = None
        recv_addr1 = None
        try:
            while 1:
                temp1,temp2 = s.recvfrom(1024)
                recv_data1, recv_addr1 = temp1,temp2
                #直至最新
        except:
            pass
        
        if recv_data1!=None:
            print(recv_data1)
            led.off() #dark
            time.sleep(1)
            led.on() #light
            # s1.sendto(b'\x11',addr1) #发回表示收到

            if recv_data1==b'\x11':
                #请求变道
                #大佬大佬
                display.buffer = b'\x01\x00\x08@\x02\x80\x90\x80\x01\x00\x08@\x02\x80\x90\x80\x01\x00\x08@\x02\x80\x11\x84\x01\x00\x08@\x02\x80\x11\x84\x01\x00\x08D\x04@\x12\x98\x01\x00\x08D\x04@\x12\x98\x01\x00\x13\xf4\x04@\x14\xe0\x01\x00\x13\xf4\x04@\x14\xe0\x01\x00\x10H\x08 \x18\x82\x01\x00\x10H\x08 \x18\x82\xff\xfe0P\x10\x10\x10\x82\xff\xfe0P\x10\x10\x10\x82\x01\x007\xfe \x08\x10~\x01\x007\xfe \x08\x10~\x01\x00P@\xc0\x06\x10\x00\x01\x00P@\xc0\x06\x10\x00'
                display.show()
                time.sleep(1)
                #求插个队
                display.buffer = b"\x01  \x08\x03@6\\\x01\x00\x00@\x01\x00D\xa0\x01\x10 <\x05 \xe4D\x01\x00|@\x01\x00D\xa0\x01\x00'\xc0\t\x10$D\x02\x80D@\x01\x00D\xa0\x7f\xfc @\x11\x08'\\\x04@H@\x01\x00i\x10\x01\x00\xf8@a\x06$D\x08 H@\x01\x00Q\x10!\x08/\xfe\x01\x00$D\x10\x10P@\x01\x00B\x08\x11\x10 @\x05\x00\xa7\xfc!\x08H@\x01\x00D\x04\t\xa0)@\x02\x00D\x04\xc1\x06H@\x01\x00H\x02"
                display.show()
                time.sleep(1)
                temp_status = 1

            elif recv_data1==b'\x00':
                #只感谢一次
                if temp_status==1:
                    temp_status = 0
                    #感谢大佬
                    display.buffer =b"\x00(\x01\x08(\x92$\xa8\x01\x00\x08@\x02\x80\x90\x80\x00$B\x08O\xaa/\xa8\x01\x00\x08@\x02\x80\x11\x84?\xfe'\x88@F!\x88\x01\x00\x08D\x04@\x12\x98  $\x88\x80\x82*\x88\x01\x00\x13\xf4\x04@\x14\xe0/\xa4\x07\xbe\x01\x004\x88\x01\x00\x10H\x08 \x18\x82 $\x04\x88H\x84(\x88\xff\xfe0P\x10\x10\x10\x82/\xa8\xe7\x88H\x12\x02\xa8\x01\x007\xfe \x08\x10~(\x98$\xc8\x87\xf2\x01\x10\x01\x00P@\xc0\x06\x10\x00"
                    display.show()
                    time.sleep(1)
                    #祝您每天
                    display.buffer = b' \x00\t\x00T\x90\x14D\x10\x00\x00\x00\xff\xfe\x02\x80\x13\xfc\t\x00\x94\x90\x11@\x1f\xfc?\xf8 \x10\x02\x80\x12\x04\x11\xfc\x10\x90\x10\x80 \x00\x01\x00"\x10\x04@\xfa\x042\x04\x11\x12\x02\x00 \x00\x01\x00!\x10\x04@\n\x04TH\x11\x12Q\x04_\xf0\x01\x00?\xfc\x08 \x12\x04\x99P\x12\x12Q\x12\x90\x10\x01\x00\x00\x10\x10\x10\x13\xfc\x11H\x14\x0e\x90\x12\x12\x10\xff\xfe\x00\xa0 \x088\x90\x12D\x18\x00\x0f\xf0\x11\x10\x01\x00\x00@\xc0\x06'
                    display.show()
                    time.sleep(0.5)
                    #万事顺利
                    display.buffer = b'\x00\x00\x01\x00\x04\x10?\xf8\x04\x00\x01\x04U$\x16$\x00\x00\x01\x00\x08\x10\x01\x08E\xfe\x07\x84U$\x15$\xff\xfe\xff\xfe\x08\x10\xff\xfeT |\x04U$$\xa4\x04\x00\x01\x00\x10\x10\x01\x08T@\x04$UD$$\x04\x00?\xf8\x10\x10?\xf8U\xfc\x04$TPD\x04\x04\x00!\x08 \x10\x01\x00U\x04\x04$T\x88\x84\x04\x07\xf0?\xf8@\xa0\x05\x00U$\xff\xa4\x85\x04\x04\x14\x04\x10\x01\x00\x80@\x02\x00U$\x0c$\x06\x02\x04\x08'
                    display.show()
                    time.sleep(1)

                else:
                    #平时状态
                    #可根据time.time()循环播放，也可根据串口屏回传信息判断动图结束再播放
                    #fig
                    display.buffer=  b'\x00\x00\x00\x00\x18\x8c\x18\x8c\x00\x00\x00\x00\x18\x8c\x18\x8c\x00\x00\x00\x00\x18\x84\x18\x84\x00\x00\x00\x00\x18\x84\x18\x84\x00\x00\x00\x00\x07\xfc\x07\xfc\x00\x00\x00\x00\x07\xfc\x07\xfc\x00\xc0\x00\xc0\x00\x80\x00\x80\x00\xc0\x00\xc0\x00\x80\x00\x80\x01\xe0\x01\xe0\x00\x80\x00\x80\x01\xe0\x01\xe0\x00\x80\x00\x80\x02\xa0\x02\xa0\x00\x80\x00\x80\x02\xa0\x02\xa0\x00\x80\x00\x80\x04\x90\x04\x90\x00\x80\x00\x80\x04\x90\x04\x90\x00\x80\x00\x80\x0c\x98\x0c\x98\x00\x80\x00\x80\x0c\x98\x0c\x98\x00\x80\x00\x80'
                    display.show()

        time.sleep_ms(100)
        

if __name__=="__main__":
    receiver()